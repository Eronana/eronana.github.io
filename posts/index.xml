<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on undefined.md</title><link>https://undefined.md/posts/</link><description>Recent content in Posts on undefined.md</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Sep 2022 21:52:16 +0800</lastBuildDate><atom:link href="https://undefined.md/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrong alpha premultiplication on iOS Safari</title><link>https://undefined.md/2022/09/16/wrong-alpha-premultiplication-on-ios-safari/</link><pubDate>Fri, 16 Sep 2022 21:52:16 +0800</pubDate><guid>https://undefined.md/2022/09/16/wrong-alpha-premultiplication-on-ios-safari/</guid><description>Problem The PNG supports 4 channels called RGBA, and we usually use the alpha channel for opacity.
But there is a different usecase to the alpha channel, the emissive intensity. The finally color will be added to the emissive color * emissive intensity.
In the fragment shader it would look like:
1 2 3 4 5 6 7 8 precision mediump float; uniform sampler2D texture; varying vec2 uv; void main () { vec4 color = texture2D(texture, uv); vec3 emissiveColor = vec3(1, 0, 0); // let red be the emissive color gl_FragColor = vec4(color.</description></item><item><title>Using Node.js to generate indexed PNG</title><link>https://undefined.md/2022/09/15/using-node.js-to-generate-indexed-png/</link><pubDate>Thu, 15 Sep 2022 16:04:21 +0800</pubDate><guid>https://undefined.md/2022/09/15/using-node.js-to-generate-indexed-png/</guid><description>A glance of indexed PNG Most PNG images have three or four channels, that indicate RGB or RGBA.
But PNG files also support indexed images, so you can put a palette into it and use one channel to indicate the palette index to represent the image.
In this article, we are going to discuss how to generate indexed PNG images in Node.js.
According to the wiki Portable Network Graphics , we know several parts of png:</description></item></channel></rss>